"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ColorNames: () => ColorNames,
  StorageType: () => StorageType,
  sessionBoxInit: () => sessionBoxInit
});
module.exports = __toCommonJS(src_exports);

// lib/enums/storage-type.ts
var StorageType = /* @__PURE__ */ ((StorageType2) => {
  StorageType2["CLOUD"] = "cloud";
  StorageType2["LOCAL"] = "local";
  StorageType2["TEMP"] = "temp";
  StorageType2["OPEN"] = "open";
  return StorageType2;
})(StorageType || {});

// src/create-profile/create-profile.ts
async function createProfileUrl(apiKey, storageType, launchUrl, profileId) {
  let defaultLink = "https://www.google.com";
  const requestData = {
    action: storageType || "open" /* OPEN */,
    url: launchUrl || defaultLink,
    profileId
  };
  const requestOptions = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `${apiKey}`
    },
    body: JSON.stringify(requestData)
  };
  const result = await fetch("http://localhost:54789/local-api/v1/action-token", requestOptions);
  if (!result) {
    throw new Error("Could not fetch resources.");
  }
  ;
  const data = await result.json();
  if (data.success) {
    const token = data.token;
    if (!token) {
      throw new Error("Generating action token was unsuccessful.");
    }
    ;
    const url = `https://open.sessionbox.dev?sbo_token=${token}`;
    return url;
  } else {
    throw new Error("Token could not be extracted.");
  }
}

// lib/utils.ts
var import_selenium_webdriver = require("selenium-webdriver");
var import_chrome = require("selenium-webdriver/chrome");
var os = require("os");
function getArchitecture() {
  if (os.arch().includes("86")) {
    return "x86-32";
  } else if (os.arch().includes("64")) {
    return "x86-64";
  } else {
    return "arm";
  }
}
async function getBrowserVersion() {
  const driver = await new import_selenium_webdriver.Builder().forBrowser("chrome").setChromeOptions(new import_chrome.Options().addArguments("--headless")).build();
  const capabilities = await driver.getCapabilities();
  driver.close();
  driver.quit();
  return capabilities.get("browserVersion").concat(".170");
}
async function createWebDriver(options) {
  const driver = await new import_selenium_webdriver.Builder().forBrowser("chrome").setChromeOptions(options || new import_chrome.Options()).build();
  return driver;
}

// src/download-extension/download-extension.ts
var import_fs = __toESM(require("fs"));
var import_chrome2 = require("selenium-webdriver/chrome");
var PATH_TO_EXTENSION = "extension/chrome_extension.crx";
async function downloadExtension() {
  if (!import_fs.default.existsSync("extension"))
    import_fs.default.mkdirSync("extension");
  const architecture = getArchitecture();
  const browserVersion = await getBrowserVersion();
  const response = await fetch(`https://clients2.google.com/service/update2/crx?response=redirect&prodversion=${browserVersion}&acceptformat=crx2,crx3&x=id%3Dgmechnknnhcmhlciielglhgodjlcbien%26uc&nacl_arch=${architecture}`);
  const buffer = await response.arrayBuffer();
  import_fs.default.writeFileSync(PATH_TO_EXTENSION, Buffer.from(buffer));
}
function addExtension(options) {
  if (options)
    return options.addExtensions(PATH_TO_EXTENSION);
  else
    return new import_chrome2.Options().addExtensions(PATH_TO_EXTENSION);
}

// lib/fetch.ts
async function getData(apiKey, endpoint, dataKey) {
  try {
    const response = await fetch(endpoint, {
      method: "GET",
      headers: {
        "Authorization": `${apiKey}`
      }
    });
    if (!response.ok) {
      throw new Error(`Request failed with status: ${response.statusText}`);
    }
    let data;
    if (response.headers.get("content-type")?.includes("application/json")) {
      data = await response.json();
    }
    if (data.success) {
      try {
        return data[dataKey];
      } catch {
        throw new Error("No such key.");
      }
    } else {
      throw new Error("Fetch was unsuccessfull.");
    }
  } catch (error) {
    console.error("Error in getData:", error);
    throw error;
  }
}
async function postData(apiKey, endpoint, dataKey, payload) {
  const options = {
    method: "POST",
    headers: {
      "Authorization": `${apiKey}`,
      "Content-Type": "application/json"
    }
  };
  if (payload) {
    options.body = JSON.stringify(payload);
  }
  try {
    const response = await fetch(endpoint, options);
    if (!response.ok) {
      throw new Error(`Request failed with status: ${response.statusText}`);
    }
    const data = await response.json();
    if (data.success) {
      try {
        return data[dataKey];
      } catch {
        throw new Error("No such key.");
      }
    } else {
      throw new Error("Fetch was unsuccessfull.");
    }
  } catch (error) {
    console.error("Error in postData:", error);
    throw error;
  }
}
async function deleteData(apiKey, endpoint) {
  try {
    const response = await fetch(endpoint, {
      method: "DELETE",
      headers: {
        "Authorization": `${apiKey}`
      }
    });
    if (!response.ok) {
      throw new Error(`Request failed with status: ${response.statusText}`);
    }
    let data;
    if (response.headers.get("content-type")?.includes("application/json")) {
      data = await response.json();
    }
    return data;
  } catch (error) {
    console.error("Error in deleteData:", error);
    throw error;
  }
}
async function updateData(apiKey, endpoint, payload) {
  try {
    const response = await fetch(endpoint, {
      method: "PUT",
      headers: {
        "Authorization": `${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });
    if (!response.ok) {
      throw new Error(`Request failed with status: ${response.statusText}`);
    }
    let data;
    if (response.headers.get("content-type")?.includes("application/json")) {
      data = await response.json();
    }
    return data;
  } catch (error) {
    console.error("Error in updateData:", error);
    throw error;
  }
}

// lib/interfaces/profile.ts
function profileToDTO(profile) {
  return {
    id: profile.id,
    teamId: profile.teamId,
    name: profile.name,
    color: profile.color,
    group: profile.group,
    icon: profile.icon,
    launchUrl: profile.urls[0].url || profile.urls[0].name
  };
}

// lib/enums/color-names.ts
var ColorNames = /* @__PURE__ */ ((ColorNames2) => {
  ColorNames2["RED"] = "red";
  ColorNames2["PINK"] = "pink";
  ColorNames2["PURPLE"] = "purple";
  ColorNames2["DEEP_PURPLE"] = "deep purple";
  ColorNames2["INDIGO"] = "indigo";
  ColorNames2["LIGHT_BLUE"] = "light blue";
  ColorNames2["CYAN"] = "cyan";
  ColorNames2["TEAL"] = "teal";
  ColorNames2["GREEN"] = "green";
  ColorNames2["LIGHT_GREEN"] = "light green";
  ColorNames2["LIME"] = "lime";
  ColorNames2["YELLOW"] = "yellow";
  ColorNames2["AMBER"] = "amber";
  ColorNames2["ORANGE"] = "orange";
  ColorNames2["DEEP_ORANGE"] = "deep orange";
  ColorNames2["BROWN"] = "brown";
  ColorNames2["GREY"] = "grey";
  ColorNames2["BLUE_GREY"] = "blue grey";
  return ColorNames2;
})(ColorNames || {});

// src/index.ts
function selenium(apiKey) {
  function isWebDriverWithExtension(driver) {
    return driver.sbExtension;
  }
  function checkDriver(driver) {
    if (!isWebDriverWithExtension(driver)) {
      throw new Error("Driver does not have SessionBox extension installed. Please initialize driver with createSessionBoxDriver.");
    }
  }
  async function waitUntilNavigation(driver) {
    await driver.wait(async () => {
      return driver.getCurrentUrl().then(function(url) {
        return !url.startsWith("https://open.sessionbox.dev") && !url.startsWith("chrome-extension://");
      });
    });
  }
  async function openNewProfile(storageType, launchUrl, driver) {
    const url = await createProfileUrl(apiKey, storageType, launchUrl);
    if (!driver) {
      driver = await createSessionBoxDriver();
    }
    checkDriver(driver);
    await driver.get(url);
    await waitUntilNavigation(driver);
    return driver;
  }
  async function openExistingProfile(profileId, driver) {
    const temporaryApi = api(apiKey);
    const profile = await temporaryApi.getProfile(profileId);
    console.log(profile);
    const launchUrl = profile.launchUrl;
    const url = await createProfileUrl(apiKey, void 0, launchUrl, profileId);
    if (!driver) {
      driver = await createSessionBoxDriver();
    }
    checkDriver(driver);
    await driver.get(url);
    await waitUntilNavigation(driver);
    return driver;
  }
  async function createSessionBoxDriver(options) {
    await downloadExtension();
    let optionsWithExtension = addExtension(options || void 0);
    const driver = await createWebDriver(optionsWithExtension);
    driver.sbExtension = true;
    return driver;
  }
  return {
    openNewProfile,
    openExistingProfile,
    createSessionBoxDriver
  };
}
function api(apiKey) {
  async function listProfiles() {
    const profiles = await getData(apiKey, "http://localhost:54789/local-api/v1/profiles", "profiles");
    return profiles.map((profile) => {
      return profileToDTO(profile);
    });
  }
  async function getProfile(profileId) {
    const profile = await getData(apiKey, `http://localhost:54789/local-api/v1/profiles/${profileId}`, "profile");
    return profileToDTO(profile);
  }
  async function createProfile(color, group, name, url, storageType, cookies, sbProxyId) {
    const payload = {
      "color": color,
      "group": group,
      "name": name,
      "url": url,
      "storageType": storageType,
      "cookies": cookies,
      "sbProxyId": sbProxyId
    };
    const result = await postData(apiKey, "http://localhost:54789/local-api/v1/profiles", "profile", payload);
    return result;
  }
  async function updateProfile(profileId, color, group, name, sbProxyId, url) {
    const payload = {
      ...color !== void 0 ? { "color": color } : { "color": void 0 },
      ...group !== void 0 ? { "group": group } : { "group": void 0 },
      ...name !== void 0 ? { "name": name } : { "name": void 0 },
      ...sbProxyId !== void 0 ? { "sbProxyId": sbProxyId } : { "sbProxyId": void 0 },
      ...url !== void 0 ? { "url": url } : { "url": void 0 }
    };
    return await updateData(apiKey, `http://localhost:54789/local-api/v1/profiles/${profileId}`, payload);
  }
  async function deleteProfile(profileId) {
    await deleteData(apiKey, `http://localhost:54789/local-api/v1/profiles/${profileId}`);
  }
  async function createActionToken(action, url, profileId) {
    let launchUrl;
    if (!url && profileId) {
      const profile = await getProfile(profileId);
      console.log(profile);
      launchUrl = profile.launchUrl;
      console.log(launchUrl);
    }
    const payload = {
      action,
      url: url || launchUrl
    };
    console.log(payload);
    if (action = "open" /* OPEN */) {
      payload.profileId = profileId;
    }
    console.log(payload);
    const result = await postData(apiKey, "http://localhost:54789/local-api/v1/action-token", "token", payload);
    return result;
  }
  async function addProxy(name, type, username, password, ip, port, teamId) {
    const payload = {
      name,
      type,
      username,
      password,
      ip,
      port,
      teamId
    };
    return await postData(apiKey, "http://localhost:54789/local-api/v1/proxies", "proxy", payload);
  }
  async function listProxies() {
    return await getData(apiKey, "http://localhost:54789/local-api/v1/proxies", "proxies");
  }
  async function removeProxy(proxyId) {
    return await deleteData(apiKey, `http://localhost:54789/local-api/v1/proxies/${proxyId}`);
  }
  async function listTeams() {
    return await getData(apiKey, "http://localhost:54789/local-api/v1/teams", "teams");
  }
  return {
    listProfiles,
    getProfile,
    createProfile,
    deleteProfile,
    updateProfile,
    createActionToken,
    addProxy,
    removeProxy,
    listProxies,
    listTeams
  };
}
function sessionBoxInit(apiKey) {
  const seleniumAutomation = selenium(apiKey);
  const sessionBoxAPI = api(apiKey);
  return { api: sessionBoxAPI, selenium: seleniumAutomation };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ColorNames,
  StorageType,
  sessionBoxInit
});
